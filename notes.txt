
could be a result of builtin record type methods for things like method accessors bypassing something

==============================================

ruby version reuses same variable while agda one creates a new one every time
... can solve this by just declaring a global variable used in agda tests

==============================================

assertion <=> (≡ true) typing judgement (as a conclusion of a parametric or hypothesis judgement)
equality assertion <=> ≡ typing judgement (as a conclusion of a parametric or hypothesis judgement)
stub <=> ≡ typing judgement (as a hypothesis of a parametric judgement), using rewrite if stuck
stub (only defined) <=> ≡ typing judgement (as a hypothesis of a hypothetical judgement) using rewrite if stuck
mock <=> universal quantification


==============================================

might be better to show assertions with an existing well known function like addition
... then we can show the practice of test first programming without having defined functions like "created?" yet and instead display our point of stubbing them

... also look at lemmachine to see how it got around the notorious (method r) propeq problem


=============================

http://martinfowler.com/articles/mocksArentStubs.html

=============


paramterizing by propositiona equality types is really where the stubbing happens

=============================

need to parameterize created? by record in slides (Assertion2 & ruby version)

==============================================

outside-in development, pretend like created? has not been implemented

... maybe mention TDD in the intro after all... or even BDD!!

==============================================

may want to use ruby in a functional style instead of oo for more direct comparisons

==============================================

reconsider this:
  req = Request.new(:post)
may want to instead Request.allocate, or rand from METHODS
... can point out the advantage of universe poly though!!!

==============================================

explain syntax sugar of "rewrite"

==============================================

req.stubs(:created?).returns(true)
... could instead
Request.any_instance.stubs(:created?).with(req).returns(true)

==============================================

mention difference where stubs does not raise error if the method was not previously defined
... but some libraries may do this
... maybe even explicitly add a raise error respond_to? check in there for clarity
... or even defined? 3.succ

==============================================

propeq hypo judges can be stubs
but also can be non-quantifiers

==============================================

need to evaluate why zero/Vec does not unify but refl does
... is it bc of the reuse of the same variable in refl, or
 merely that only one constructor exists
... or that we capture the type in a variable rather than
pattern but then case on that variable value?

==============================================

how does stubs_if_defined (raise error if not) compare to
treating forall as a mock?
... stubs_if_defined does not require any particular
implementation, in fact even a postulate will do
... on the ruby side returning nil works because it does
not need to obey a type signature

in fp, a stub is technically on the implicit object, which
is why later using mock for uni quant still works, bc the
implicit object has already been postulated for even though
the mock has no methods on it

==============================================

postulate is like defining a method that
raises an error

stub only requires a rewrite if it is different than what it stubs, & what it stubs is non-trivial?

in ruby mocks raise errors on method calls, in agda compile errors happen in uni quants on unsolvable case distinctions

... its like using smart mocks that do not actually call a method if the distinction is evident anyway
... same with stubs, they are not needed if what they are used for is always the same

==============================================

may be better to go through happy path first, then backtrack to explain actual differences

we know that postulate will never be able to provide a case distinction, but its result may be ignored anyway
... and if it is then the notion of it being equivalent to defining a fun that raises an error is false
... bc it could still get "optimized away", maybe it has to do with the lazy semantics

even though agda can optimize, it still must work on already defined functions
... so there is a tradeoff between the two languages
